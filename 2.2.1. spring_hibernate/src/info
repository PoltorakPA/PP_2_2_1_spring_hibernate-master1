Скачайте/склонируйте заготовку проекта по ссылке.
С работой ядра Спринг мы разобрались, теперь самое время подключить к нему пару модулей для комфортной работы.
Начнем с ORM.
Для работы с hibernate нам понадобится зависимость hibernate-core, корректным взаимодействием со Спрингом озаботится
зависимость spring-orm.
Как вы можете видеть, зависимость spring-core пропала, это произошло из-за того, что она является транзитной
для всех модулей Спринга и дублировать ее смысла нет.
У нас появились пакеты model, service, теперь сервисы и DAO объявлены бинами с помощью аннотаций @Repository и @Service.
В методе main будет происходить тестирование работоспособности нашего приложения. Класс Car аннотирован как стандартная
сущность hibernate. В AppConfig теперь присутствует базовая настройка hibernate, берущая данные из файла db.properties.
Обратите внимание, что для ее работы используется аннотация @PropertySource("classpath:db.properties"),
обращающаяся к папке ресурсов. На этом настройка приложения окончена.

Задание:
1. Создайте соединение к своей базе данных и схему. Запустите приложение. Проверьте, что оно полностью работает.
2. Создайте сущность Car с полями String model и int series, на которую будет ссылаться User с помощью связи one-to-one.
3. Добавьте этот класс в настройки hibernate.
4. Создайте несколько пользователей с машинами, добавьте их в базу данных, вытащите обратно.
5. В сервис добавьте метод, который с помощью hql-запроса будет доставать юзера, владеющего машиной по ее модели и серии.

Напишу для тех, кто запутался, создаете свой класс кар по аналогии с юзером, далее переходите в db_properties там
вставляете свои данные, после этого смотрите пару роликов про OneToOne, далее связываете свои классы через конструктор,
поле, сеттер. Я делал через сеттер, после чего у вас уже почти все готово, осталось добавить свой кар класс в настройки
хибера, находите нужный класс и там будет добавить в аннотациионные классы свой, просто рядом через запятую,
далее осталось написать метод, пишите его в юзер дао, и в дао импл реализуете его при помощи hql запроса - с ним конечно
повозился, ну и в сервисы тоже этот метод добавьте. Удачи!

AppConfig-Настроен
Car & User-Настроил
properties-настроил
Main-Создайте несколько пользователей с машинами, добавьте их в базу данных, вытащите обратно

1) в дао новых классов и интерфейсов добавлять не нужно;
2) в сервис новых классов и интерфейсов добавлять не нужно;
3) в дао и сервисе нужно во всех классах и интерфейсах, прописать всего 1 метод;
4) ОСОБОЕ внимание уделить когда оверайдешь toString(), а именно удалить ненужное(из за этого я потратил минимум
часов 5 - постоянно вылезали ошибки, потому что он не мог вывести, то что там указано);
5) в мейне нужно добавить юзеров, потом добавить машины и уже в конце(КТО БЫ МОГ подумать) в одну строку добавить этого юзера и машину в userService;
6) само собой не забыть про factoryBean.setAnnotatedClasses (добавить туда созданный класс);
7) перед каждым запуском мейна я через ворк бенч выполнял команду: drop tables users, user_cars.
Удачи)

Вместо:
factoryBean.setAnnotatedClasses(User.class);
factoryBean.setAnnotatedClasses(Car.class);

Пишем:
factoryBean.setAnnotatedClasses(User.class,Car.class);